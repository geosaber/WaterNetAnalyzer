# -*- coding: utf-8 -*-

"""
/***************************************************************************
 WaterNets
                                 A QGIS plugin
 This plugin calculates upstream areas
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-11-09
        copyright            : (C) 2019 by Stefan Hahmann
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""


__author__ = 'Stefan Hahmann'
__date__ = '2019-11-09'
__copyright__ = 'GPL'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication, QVariant
from qgis.core import *
import processing
import numpy as np

class UpstreamAreaCalc(QgsProcessingAlgorithm):

        def shortHelpString(self):
        return self.tr(""" Tool to compute the area of all watersheds upstream of a selected segment in a river network.
        
        Workflow: 
        1. select one line segment form the river network.
        2. In the drop-down lists choose the needed input layers. 
        3. Click on \"Run\"
        
        """)

    def name(self):
        return '4 Calculate upstream area'

    def displayName(self):
        return self.tr(self.name())

    def group(self):
        return self.tr(self.groupId())

    def groupId(self):
        return ''

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return UpstreamAreaCalc()

    def shortHelpString(self):
        return self.tr(""" Workflow: 
        TODO:
        1. select the layer in the drop-down list \"The water network\".
        2. select the column/field to be accumulated along the flow path \"Field to calculate\"
        3. In the drop-down lists chose the columns in the attribute table created by the tool \"1 Water Network Constructor\"
        4. Click on \"Run\"
        """)

    def initAlgorithm(self, config=None):
        self.addParameter(QgsProcessingParameterVectorLayer('fliessgewaessernetz', 'Fliessgewaessernetz', types=[QgsProcessing.TypeVectorLine], defaultValue=None))
        self.addParameter(QgsProcessingParameterVectorLayer('teileinzugsgebiete', 'Teileinzugsgebiete', types=[QgsProcessing.TypeVectorPolygon], defaultValue=None))
        self.addParameter(QgsProcessingParameterFileDestination('GesamtflcheDesEinzugsgebietes', 'Gesamtfl√§che des Einzugsgebietes', optional=True, fileFilter='HTML files (*.html)', createByDefault=True, defaultValue=None))
        
    def processAlgorithm(self, parameters, context, model_feedback):
        # Use a multi-step feedback, so that individual child algorithm progress reports are adjusted for the
        # overall progress through the model
        feedback = QgsProcessingMultiStepFeedback(4, model_feedback)
        results = {}
        outputs = {}
        # 2 Flow path upstream/downstream
        alg_params = {
            'INPUT_FIELD_ID': 'NET_ID',
            'INPUT_FIELD_NEXT': 'NET_TO',
            'INPUT_FIELD_PREV': 'NET_FROM',
            'INPUT_LAYER': parameters['fliessgewaessernetz'],
            'INPUT_Sect': 0
        }
        outputs['FlowPathUpstreamdownstream'] = processing.run('Water_Net_Analyzer:2 Flow path upstream/downstream', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        feedback.setCurrentStep(1)
        if feedback.isCanceled():
            return {}
        
        # Extract selected features
        alg_params = {
            'INPUT': parameters['fliessgewaessernetz'],
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['ExtractSelectedFeatures'] = processing.run('native:saveselectedfeatures', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        feedback.setCurrentStep(2)
        if feedback.isCanceled():
            return {}
        
        # Extract by location
        alg_params = {
            'INPUT': parameters['teileinzugsgebiete'],
            'INTERSECT': outputs['ExtractSelectedFeatures']['OUTPUT'],
            'PREDICATE': [1],
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        outputs['ExtractByLocation'] = processing.run('native:extractbylocation', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        feedback.setCurrentStep(3)
        if feedback.isCanceled():
            return {}
        
        # Basic statistics for fields
        alg_params = {
            'FIELD_NAME': 'AREA_QM',
            'INPUT_LAYER': outputs['ExtractByLocation']['OUTPUT'],
            'OUTPUT_HTML_FILE': parameters['GesamtflcheDesEinzugsgebietes']
        }
        outputs['BasicStatisticsForFields'] = processing.run('qgis:basicstatisticsforfields', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        results['GesamtflcheDesEinzugsgebietes'] = outputs['BasicStatisticsForFields']['OUTPUT_HTML_FILE']
        return results